"use client"

import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChevronDown, Download, FileText, File } from "lucide-react"

interface FactCheckResult {
  originalQuery?: string
  normalizedQuery?: string
  verdict: {
    label: "True" | "False" | "Mixed" | "Unclear" | "Needs More Evidence"
    confidence: number
    summary: string
  }
  keyPoints: string[]
  explanation: string
  factCheckReviews: Array<{
    publisher: string
    title: string
    url: string
    rating?: string
    reviewedAt?: string
  }>
  sources: Array<{
    rank: number
    url: string
    title: string
    publisher?: string
    publishedAt?: string
    type: "primary" | "secondary" | "factcheck" | "academic" | "news" | "government"
  }>
  metadata?: {
    claimant?: string
    firstSeen?: string
    topics?: string[]
  }
  slug?: string
  cached?: boolean
  cachedAt?: string
  updatedAt?: string
}

interface ExportDropdownProps {
  result: FactCheckResult
  query: string
}

export function ExportDropdown({ result, query }: ExportDropdownProps) {
  const [isOpen, setIsOpen] = useState(false)
  const dropdownRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false)
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => document.removeEventListener("mousedown", handleClickOutside)
  }, [])

  const generateMarkdown = (): string => {
    const timestamp = result.cachedAt
      ? new Date(result.cachedAt).toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })
      : new Date().toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })

    let markdown = `# Fact-Check Report: ${result?.normalizedQuery || query}\n\n`
    
    markdown += `**Generated:** ${timestamp}  \n`
    markdown += `**Verdict:** ${result.verdict?.label || "Unclear"}  \n`
    markdown += `**Confidence:** ${Math.round((result.verdict?.confidence || 0) * 100)}%  \n`
    markdown += `**Sources Analyzed:** ${(result.sources || []).length}\n\n`

    markdown += `## Executive Summary\n\n`
    markdown += `${result.verdict?.summary || "Analysis unavailable"}\n\n`

    if ((result.factCheckReviews || []).length > 0) {
      markdown += `## Human Fact-Check Reviews (${(result.factCheckReviews || []).length})\n\n`
      result.factCheckReviews.forEach((review, index) => {
        markdown += `### ${index + 1}. ${review.publisher}\n`
        markdown += `**Title:** ${review.title}  \n`
        if (review.rating) markdown += `**Rating:** ${review.rating}  \n`
        markdown += `**URL:** ${review.url}\n\n`
      })
    }

    if ((result.keyPoints || []).length > 0) {
      markdown += `## Key Findings\n\n`
      result.keyPoints.forEach((point, index) => {
        markdown += `${index + 1}. ${point}\n\n`
      })
    }

    if (result.explanation) {
      markdown += `## Detailed Analysis\n\n`
      markdown += `${result.explanation}\n\n`
    }

    if ((result.sources || []).length > 0) {
      markdown += `## Sources & References\n\n`
      result.sources.forEach((source, index) => {
        markdown += `${index + 1}. **${source.title}**  \n`
        if (source.publisher) markdown += `   Publisher: ${source.publisher}  \n`
        if (source.publishedAt) markdown += `   Published: ${source.publishedAt}  \n`
        markdown += `   Type: ${source.type}  \n`
        markdown += `   URL: ${source.url}\n\n`
      })
    }

    markdown += `---\n\n`
    markdown += `*Generated by GenuVerity Lite - AI + Human Fact Checking*  \n`
    markdown += `*Website: https://beta.genuverity.com*`

    return markdown
  }

  const generatePDF = async (): Promise<void> => {
    const markdown = generateMarkdown()
    
    // Create a temporary HTML page for PDF generation
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <title>Fact-Check Report: ${result?.normalizedQuery || query}</title>
          <style>
            body { 
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
              line-height: 1.6; 
              max-width: 800px; 
              margin: 0 auto; 
              padding: 40px 20px; 
              color: #333;
            }
            h1 { color: #1a365d; border-bottom: 3px solid #4299e1; padding-bottom: 10px; }
            h2 { color: #2d3748; margin-top: 2em; border-bottom: 1px solid #e2e8f0; padding-bottom: 5px; }
            h3 { color: #4a5568; }
            strong { color: #2d3748; }
            .verdict { 
              background: #f7fafc; 
              padding: 20px; 
              border-left: 4px solid #4299e1; 
              margin: 20px 0; 
            }
            .source { margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 5px; }
            .footer { 
              margin-top: 40px; 
              padding-top: 20px; 
              border-top: 1px solid #e2e8f0; 
              font-size: 0.9em; 
              color: #718096; 
            }
          </style>
        </head>
        <body>
          ${markdown
            .replace(/^# (.+)$/gm, '<h1>$1</h1>')
            .replace(/^## (.+)$/gm, '<h2>$1</h2>')
            .replace(/^### (.+)$/gm, '<h3>$1</h3>')
            .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.+?)\*/g, '<em>$1</em>')
            .replace(/^(\d+\. .+)$/gm, '<p>$1</p>')
            .replace(/  $/gm, '<br>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/^(?!<[h|p])/gm, '<p>')
            .replace(/(?<![>])$/gm, '</p>')
            .replace(/<p><\/p>/g, '')
            .replace(/---/g, '<hr>')
          }
        </body>
      </html>
    `

    // Create a new window for PDF generation
    const printWindow = window.open('', '_blank')
    if (printWindow) {
      printWindow.document.write(htmlContent)
      printWindow.document.close()
      
      // Wait for content to load, then print
      printWindow.onload = () => {
        setTimeout(() => {
          printWindow.print()
          printWindow.close()
        }, 100)
      }
    } else {
      // Fallback: download as HTML file
      const blob = new Blob([htmlContent], { type: 'text/html' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `fact-check-${result?.normalizedQuery?.replace(/[^a-zA-Z0-9]/g, '-') || 'report'}.html`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    }
  }

  const exportMarkdown = (): void => {
    const markdown = generateMarkdown()
    const blob = new Blob([markdown], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `fact-check-${result?.normalizedQuery?.replace(/[^a-zA-Z0-9]/g, '-') || 'report'}.md`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const menuItems = [
    {
      action: generatePDF,
      icon: FileText,
      label: "Export as PDF",
      description: "Download as printable PDF document"
    },
    {
      action: exportMarkdown,
      icon: File,
      label: "Export as Markdown",
      description: "Download as markdown text file"
    }
  ]

  return (
    <div className="relative" ref={dropdownRef}>
      <motion.button
        className="w-full inline-flex items-center justify-center gap-2 rounded-lg bg-muted hover:bg-muted/80 px-3 py-2 text-sm font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
        onClick={() => setIsOpen(!isOpen)}
        whileHover={{ scale: 1.02 }}
        whileTap={{ scale: 0.98 }}
      >
        <Download className="h-4 w-4" />
        <span>Export</span>
        <ChevronDown 
          className={`h-3 w-3 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}
        />
      </motion.button>

      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95, y: -8 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.95, y: -8 }}
            transition={{ duration: 0.15, ease: "easeOut" }}
            className="absolute right-0 top-full mt-2 w-64 border shadow-2xl rounded-xl p-2 z-50 bg-background/95 backdrop-blur-xl"
          >
            {/* Header */}
            <div className="px-3 py-2 border-b border-border/20 mb-2">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 rounded-full bg-gradient-to-r from-emerald-500 to-blue-500 animate-pulse" />
                <h3 className="text-sm font-semibold text-foreground">Export Report</h3>
              </div>
            </div>

            {/* Menu Items */}
            <div className="space-y-1">
              {menuItems.map((item, index) => (
                <motion.div
                  key={item.label}
                  initial={{ opacity: 0, x: -8 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.15, delay: index * 0.03 }}
                >
                  <button
                    onClick={() => {
                      item.action()
                      setIsOpen(false)
                    }}
                    className="w-full flex items-center gap-3 p-3 rounded-lg hover:bg-muted/30 transition-colors group text-left"
                  >
                    <div className="flex-shrink-0">
                      <div className={`w-8 h-8 rounded-lg border flex items-center justify-center group-hover:scale-110 transition-transform ${
                        item.label.includes('PDF') 
                          ? "bg-gradient-to-br from-red-500/20 to-pink-500/20 border-red-500/30" 
                          : "bg-gradient-to-br from-blue-500/20 to-purple-500/20 border-blue-500/30"
                      }`}>
                        <item.icon className={`h-4 w-4 ${
                          item.label.includes('PDF') ? "text-red-400" : "text-blue-400"
                        }`} />
                      </div>
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className={`text-sm font-medium group-hover:transition-colors ${
                        item.label.includes('PDF') 
                          ? "text-foreground group-hover:text-red-400" 
                          : "text-foreground group-hover:text-blue-400"
                      }`}>
                        {item.label}
                      </h4>
                      <p className="text-xs text-muted-foreground leading-relaxed">
                        {item.description}
                      </p>
                    </div>
                  </button>
                </motion.div>
              ))}
            </div>

            {/* Footer */}
            <div className="px-3 py-2 mt-3 border-t border-border/20">
              <p className="text-xs text-muted-foreground text-center">
                Export includes all analysis data and sources
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}